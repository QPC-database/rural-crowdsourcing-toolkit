openapi: '3.0.2'
info:
  title: Karya Box Server API
  description: This document describes the API between the Karya box server and
    the android client.
  license:
    name: MIT
  version: '1.0'

servers:
  - url: '/api/v1'

paths:
  /worker:
    get:
      description: Get a worker record. The worker can identify themselves using
        their unique access code or the id token previously received from the
        server. When using access code, this end point just returns the default
        language associated with the corresponding worker record and if the
        worker has already been registered (used to determine the registration
        flow post OTP verification).

      security:
        - AccessCode: []
        - IDToken: []

      responses:
        200:
          description: Worker authorized successfully. Returned partial worker
            record if access code was used for authentication, or full worker
            record if id token was used.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    description: Response if id token is used for auth
                    $ref: '#/components/schemas/Worker'
                  - type: object
                    description: Response if access code is used for auth
                    properties:
                      language_code:
                        type: string
                        description: Code of the default language for the worker
                          record.
                      registered:
                        type: boolean
                        description: Has a worker already registered previously
                          with this code?

        401:
          $ref: '#/components/responses/Unauthorized'

    put:
      description: Update the "updatable" parameters of a worker. The worker can
        identify themselves using id token that is sent after the registration.
        The action query parameter describes if the request is a simple update
        of for registering the worker. For registration, year of birth and
        gender are required parameters.

      parameters:
        - name: action
          description: Specifies the type of update. Can be 'register' or 'update'.
          schema: { type: string }
          in: query
          required: true

      security:
        - IDToken: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                yob:
                  type: integer
                  description: Year of birth. Required with registration.
                gender:
                  type: string
                  description: Gender. Required with registration.
                # TODO: List other updatable parameters here

      responses:
        200:
          description: Request executed successfully. Returned entire worked record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worker'

        400:
          description: Action query parameter is not present, or required fields
            are not present with registration, or an empty update.

        401:
          $ref: '#/components/responses/Unauthorized'

  /worker/otp:
    put:
      description: Generate/resend/verify OTP for a worker. The worker can
        identify themselves using their unique access code. The "action" query
        parameter should be "generate" | "resend" | "verify". In case of
        "verify", the OTP should be included in the header. The return type for
        resend and generate is empty Json-object and for verify it would be the
        entire worker record.

      parameters:
        - name: action
          in: query
          required: true
          schema: { type: string }
        - name: phone-number
          in: header
          required: true
          schema: { type: string }
        - name: otp
          in: header
          required: false
          schema: { type: string }

      security:
        - AccessCode: []
        - IDToken: []

      responses:
        200:
          description: Request executed successfully. Returned an empty response
            generate/resend of OTP and the entire worker record for verify.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    description: Empty object for generate / resend OTP
                  - type: object
                    description: Entire worker record on successful verification.
                    $ref: '#/components/schemas/Worker'

        400:
          description: Missing phone number and OTP (for verify).

        401:
          $ref: '#/components/responses/Unauthorized'

        403:
          description: Access code is already used by another phone number.

        408:
          description: Time limit exceeded before the verify request was sent.

        429:
          description: Request rate for sending OTP exceeded. Rate will be
            by the server. Only for generate and resend.

        503:
          description: Unable to send OTP. Or OTP service currently unavailable.
            Only for generate and resend.

  /language_assets/{code}:
    get:
      description: Get the file asset for the language with the specified code.
        The response will be a tar ball with all audio files.

      parameters:
        - name: code
          description: ISO 639-1 code for the language
          schema: { type: string }
          in: query
          required: true

      security:
        - AccessCode: []
        - IDToken: []

      responses:
        200:
          description: Successfully returned language asset to worker.
          content:
            application/tgz:
              schema:
                type: string
                format: binary

        401:
          $ref: '#/components/responses/Unauthorized'

        400:
          description: Missing code in query parameter

        404:
          description: No assets for the specified language

  /assignment/{id}/input_file:
    get:
      description: Get the input file for a particular assignment.

      parameters:
        - name: id
          description: ID of the assignment
          in: query
          schema: { type: string }
          required: true

      security:
        - IDToken: []

      responses:
        200:
          description: Successfully returned input file to worker.
          content:
            application/tgz:
              schema:
                type: string
                format: binary

        401:
          $ref: '#/components/responses/Unauthorized'

        403:
          description: Assignment was not made to the requesting user.

        404:
          description: Assignment does not exist with the given id or the
            particular assignment does not have an input file.

  /assignment/{id}/output_file:
    post:
      description: Submit the output file for a particular assignment.

      parameters:
        - name: id
          description: ID of the assignment
          in: query
          schema: { type: string }
          required: true

      security:
        - IDToken: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                algorithm:
                  type: string
                  description: Algorithm used to create the checksum
                checksum:
                  type: string
                  description: Checksum for the uploaded file

      responses:
        200:
          description: Successfully created (or updated) output file for
            assignment. Returned the karya file record for the file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KaryaFile'

        400:
          description: Missing fields in the request body, or no file or invalid
            checksum.

        401:
          $ref: '#/components/responses/Unauthorized'

        403:
          description: Assignment was not made the the requesting user.

        404:
          description: Assignment does not exist for the given ID.

  /worker/log_file:
    post:
      description: Upload or replace a log file created for the current worker.

      security:
        - IDToken: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                algorithm:
                  type: string
                  description: Algorithm used to create the checksum
                checksum:
                  type: string
                  description: Checksum for the uploaded file
                timestamp:
                  type: string
                  description: Unique timestamp to identify the file with (e.g.,
                    date on which it was created).

      responses:
        200:
          description: Successfully created (or updated) log file for worker.
            Returns the karya file record for the newly created file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KaryaFile'

        400:
          description: Missing fields in the request body, or no file or invalid
            checksum.

        401:
          $ref: '#/components/responses/Unauthorized'

  /assignments:
    put:
      description: Submit all completed and skipped assignments.

      security:
        - IDToken: []

      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MicrotaskAssignment'

      responses:
        200:
          description: Successfully received all completed/skipped assignments.
            Returns the IDs of all the received assignments.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

        400:
          description: Invalid or an empty request.

        401:
          $ref: '#/components/responses/Unauthorized'

    get:
      description: Get assignments (new or verified) that were last updated
        beyond the timestamp specified in the request. For new assignments, the
        response includes all the microtask records and the task information
        associated with the assignments. For verified assignments, the response
        only includes the relevant information from the list of assignments.

      parameters:
        - name: type
          description: Type of assignments to get (new or verified)
          in: query
          required: true
          schema: { type: string }

        - name: from
          description: ISO formatted timestamp describing the time from which
            assignment updates should be collected
          in: query
          required: false
          schema: { type: string }

      security:
        - IDToken: []

      responses:
        200:
          description: Successfully sent list of assignments to the worker.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    description: Response to new assignments
                    properties:
                      assignments:
                        type: array
                        description: List of new assignments
                        items:
                          $ref: '#/components/schemas/MicrotaskAssignment'
                      microtasks:
                        type: array
                        description: List of microtasks for the assignments
                        items:
                          $ref: '#/components/schemas/Microtask'
                      tasks:
                        type: array
                        description: List of tasks for the microtasks
                        items:
                          $ref: '#/components/schemas/Task'

                  - type: array
                    description: Response to verified assignments
                    items:
                      $ref: '#/components/schemas/MicrotaskAssignment'

        400:
          description: Missing type or from fields in query.

        401:
          $ref: '#/components/responses/Unauthorized'

  /payment_methods:
    post:
      description: Submit information for a new payment method for the worker.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethod'

      responses:
        200:
          description: Successfully created a new payment method for the worker.
            Returns the newly created record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'

        400:
          description: Invalid request.

        401:
          description: Unauthorized request. Invalid id token.

  /payment_method/{id}:
    parameters:
      - name: id
        description: ID of the payment method
        required: true
        in: path
        schema: { type: string }

    get:
      description: Get updated payment method record.
      responses:
        200:
          description: Successfully sent the updated payment method record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'

        400:
          description: Invalid request.

        401:
          description: Unauthorized request. Invalid id token.

    put:
      description: Update any updatable entries of payment method.
      responses:
        200:
          description: Successfully sent the updated payment method record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'

        400:
          description: Invalid request.

        401:
          description: Unauthorized request. Invalid id token.

  /payments:
    get:
      description: Get all payments updated after the given timestamp.

      parameters:
        - name: from
          required: true
          description: Start timestamp for the payments
          in: query
          schema: { type: string }

      responses:
        200:
          description: Successfully sent the list of payments made to the
            worker.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'

        400:
          description: Invalid request.

        401:
          description: Unauthorized request. Invalid id token.

  /payments/{id}:
    parameters:
      - name: id
        description: ID of the payment
        required: true
        in: path
        schema: { type: string }

    put:
      description: Update the status of the payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'

      responses:
        200:
          description: Successfully updated the payment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'

        400:
          description: Invalid request.

        401:
          description: Unauthorized request. Invalid id token.

components:
  schemas:
    Worker:
      type: object
      properties:
        id:
          type: string
        local_id:
          type: string
        box_id:
          type: string
        creation_code:
          type: string
        auth_provider:
          type: string
        username:
          type: string
        salt:
          type: string
        passwd_hash:
          type: string
        phone_number:
          type: string
        email:
          type: string
        oauth_id:
          type: string
        id_token:
          type: string
        full_name:
          type: string
        profile_picture:
          type: string
        age:
          type: string
        gender:
          type: string
        app_language:
          type: string
        last_sent_to_box_at:
          type: string
        last_received_from_box_at:
          type: string
        last_sent_to_server_at:
          type: string
        last_received_from_server_at:
          type: string
        params:
          type: object
        created_at:
          type: string
        last_updated_at:
          type: string

    Language:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        primary_language_name:
          type: string
        locale:
          type: string
        iso_639_3_code:
          type: string
        script:
          type: string
        string_support:
          type: boolean
        file_support:
          type: boolean
        list_support:
          type: boolean
        update_lrv_file:
          type: boolean
        lrv_file_id:
          type: boolean
        params:
          type: object
        created_at:
          type: string
        last_updated_at:
          type: string

    KaryaFile:
      type: object
      properties:
        id:
          type: string
        local_id:
          type: string
        box_id:
          type: string
        container_name:
          type: string
        name:
          type: string
        url:
          type: string
        creator:
          type: string
        worker_id:
          type: string
        algorithm:
          type: string
        checksum:
          type: string
        in_box:
          type: boolean
        in_server:
          type: boolean
        params:
          type: object
        created_at:
          type: string
        last_updated_at:
          type: string

    MicrotaskAssignment:
      type: object
      properties:
        id:
          type: string
        local_id:
          type: string
        box_id:
          type: string
        microtask_id:
          type: string
        worker_id:
          type: string
        deadline:
          type: string
        status:
          type: string
        completed_at:
          type: string
        output:
          type: object
        output_file_id:
          type: string
        credits:
          type: number
        params:
          type: object
        created_at:
          type: string
        last_updated_at:
          type: string

    Microtask:
      type: object
      properties:
        id:
          type: string
        task_id:
          type: string
        group_id:
          type: string
        input:
          type: object
        input_file_id:
          type: string
        deadline:
          type: string
        credits:
          type: number
        status:
          type: string
        output:
          type: object
        params:
          type: object
        created_at:
          type: string
        last_updated_at:
          type: string

    Task:
      type: object
      properties:
        id:
          type: string
        work_provider_id:
          type: string
        language_id:
          type: string
        scenario_id:
          type: string
        name:
          type: string
        description:
          type: string
        primary_language_name:
          type: string
        primary_language_description:
          type: string
        params:
          type: object
        errors:
          type: object
        actions:
          type: object
        input_file_id:
          type: string
        output_file_id:
          type: string
        budget:
          type: number
        deadline:
          type: string
        assignment_granularity:
          type: string
        group_assignment_order:
          type: string
        microtask_assignment_order:
          type: string
        status:
          type: string
        created_at:
          type: string
        last_updated_at:
          type: string

    PaymentMethod:
      type: object

    Payment:
      type: object

  securitySchemes:
    AccessCode:
      type: apiKey
      description: Unique access code provided to each worker. This
        authentication method can be used for the end points that help associate
        a phone number to the corresponding worker record, and end points that
        are not worker specific (e.g., get language assets).
      in: header
      name: access-code

    IDToken:
      type: http
      scheme: bearer
      description: ID token generated by the server upon successful verification
        of the OTP.

  responses:
    Unauthorized:
      description: Missing or invalid authentication information
